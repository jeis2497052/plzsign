* https://help.github.com/articles/signing-commits-using-gpg/
** start with gpg2 or 2.1 or higher
** just installed sudo apt install gpgv2 guncat and see gpg2 in //usr/bin/
* Generating a GPG key
** try:
```
gpgv2 --full-generate-key

```


```
* gpg2 --full-generate-key
* gpg: invalid option "--full-generate-key"
* a@b:~$
* gpgv: invalid option "--full-generate-key"
* a@b:~$ gpg --full-generate-key
* gpg: Invalid option "--full-generate-key"
* a@b:~$
```
* had some problems as shown below

We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
gpg: lookup_hashtable failed: Unknown system error
gpg: trustdb: searching trust record failed: Unknown system error
gpg: Error: The trustdb is corrupted.
gpg: You may try to re-create the trustdb using the commands:
gpg:   cd ~/.gnupg
gpg:   gpg --export-ownertrust > otrust.tmp
gpg:   rm trustdb.gpg
gpg:   gpg --import-ownertrust < otrust.tmp
gpg: If that does not work, please consult the manual
[a@b ~]$ cd .gnupg
[a@b .gnupg]$ clamscan -r -i . |grep Inf
Infected files: 0
[a@b .gnupg]$    gpg --export-ownertrust > otrust.tmp
gpg: keyring `/home/a/.gnupg/secring.gpg' created
gpg: keyring `/home/a/.gnupg/pubring.gpg' created
[a@b .gnupg]$ rm trustdb.gpg
[a@b .gnupg]$   gpg --import-ownertrust < otrust.tmp
gpg: /home/a/.gnupg/trustdb.gpg: trustdb created
[a@b .gnupg]$ cd
* [a@b ~]$ gpg2 --full-generate-key
gpg (GnuPG) 2.2.3; Copyright (C) 2017 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

gpg: starting migration from earlier GnuPG versions
gpg: porting secret keys from '/home/a/.gnupg/secring.gpg' to gpg-agent
gpg: migration succeeded
Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
Your selection?
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048) 4096
Requested keysize is 4096 bits
Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
Key is valid for? (0)
Key does not expire at all
Is this correct? (y/N) y

GnuPG needs to construct a user ID to identify your key.

* Real name: jeis2497052
* Email address: john.eismeier@gmail.com
* Comment: for github
* You selected this USER-ID:
*     "jeis2497052 (for github) <john.eismeier@gmail.com>"

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
gpg: key 3AFC1E519A60DBAA marked as ultimately trusted
gpg: directory '/home/a/.gnupg/openpgp-revocs.d' created
gpg: revocation certificate stored as '/home/a/.gnupg/openpgp-revocs.d/8A6B29ACE5728C597B9579703AFC1E519A60DBAA.rev'
public and secret key created and signed.

pub   rsa4096 2018-01-24 [SC]
      8A6B29ACE5728C597B9579703AFC1E519A60DBAA
uid                      jeis2497052 (for github) <john.eismeier@gmail.com>
sub   rsa4096 2018-01-24 [E]

[a@b ~]$



* the Ubuntu key ???

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
gpg: /home/jeis247/.gnupg/trustdb.gpg: trustdb created
gpg: key 48CE86836B9BD325 marked as ultimately trusted
gpg: directory '/home/jeis247/.gnupg/openpgp-revocs.d' created
gpg: revocation certificate stored as '/home/jeis247/.gnupg/openpgp-revocs.d/53D5FE7A638732CB9CE2071448CE86836B9BD325.rev'
public and secret key created and signed.

pub   rsa4096 2018-01-24 [SC]
      53D5FE7A638732CB9CE2071448CE86836B9BD325
uid                      John Eismeier (Ubuntu) <john.eismeier@gmail.com>
sub   rsa4096 2018-01-24 [E]

* need to export
gpg --list-secret-keys --keyid-format LONG
then
gpg --armor --export <fill in pub key>
